{"name": "用例 module: test;用例 case_id: event_create_003", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <fastpt.testcase.test_project.test_api.TestDemo object at 0x0000016C5DC19250>\ndata = {'assert': \"assert 200 == pm.response.get('status_code')\", 'case_desc': '测试hooks', 'case_id': 'event_create_003', 'data': {'body': '${random_phone()}', 'title': 'foo', 'userId': 1}, ...}\n\n    @allure.story(\"yaml数据测试输出\")\n    @pytest.mark.test_api\n    @pytest.mark.parametrize('data', yaml_data, ids=yaml_ids)\n    def test_004(self, data):\n        \"\"\" 测试004 \"\"\"\n        response = send_request.send_request(data)\n        rs = response['status_code']\n        # yaml 测试报告需要手动写入\n        # 条件, 写入内容均可自定义\n        if rs == 200:\n            write_yaml_report(data=[{'case': data['case_id'], 'result': 'PASS'}], status='pass')\n        else:\n            write_yaml_report(data=[{'case': data['case_id'], 'result': 'FAIL'}], status='fail')\n>       Asserter().exec_asserter(response, assert_text=response['request_data']['assert'])\n\ntestcase\\test_project\\test_api.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\assert_control.py:288: in exec_asserter\n    self._code_asserter(response, assert_text)\nutils\\assert_control.py:59: in _code_asserter\n    self._exec_code_assert(response, assert_text)\nutils\\assert_control.py:209: in _exec_code_assert\n    exec(format_assert_text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>   ???\nE   AssertionError\n\n<string>:1: AssertionError"}, "description": "测试hooks", "steps": [{"name": "请求 method: post", "status": "passed", "start": 1659023196959, "stop": 1659023196959}, {"name": "请求 params: None", "status": "passed", "start": 1659023196959, "stop": 1659023196959}, {"name": "请求 headers: None", "status": "passed", "start": 1659023196959, "stop": 1659023196959}, {"name": "请求 data 类型：json", "status": "passed", "start": 1659023196959, "stop": 1659023196959}, {"name": "请求 json: {\"title\": \"foo\", \"body\": \"15180202041\", \"userId\": 1}", "status": "passed", "start": 1659023196960, "stop": 1659023196960}, {"name": "请求 sql: None", "status": "passed", "start": 1659023196960, "stop": 1659023196960}, {"name": "请求 assert: assert 200 == pm.response.get('status_code')", "status": "passed", "start": 1659023196961, "stop": 1659023196961}], "attachments": [{"name": "stdout", "source": "c2e8be40-a2b3-4b82-9520-3a38c22d9c53-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "81edac09-38c9-4097-8060-842a66242e44-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'module': 'test', 'case_id': 'event_create_003', 'case_desc': '测试hooks', 'is_run': None, 'method': 'post', 'env': None, 'url': 'https://jsonplaceholder.typicode.com/posts', 'params': None, 'headers': None, 'data_type': 'json', 'data': {'title': 'foo', 'body': '${random_phone()}', 'userId': 1}, 'files': None, 'sql': None, 'assert': \"assert 200 == pm.response.get('status_code')\"}"}], "start": 1659023196765, "stop": 1659023198178, "uuid": "2eb1e128-77ef-4d82-a683-6c6adcffa401", "historyId": "52c6c90d6637bbe1c564d3a71a944c9f", "testCaseId": "1624834a7fba0b30959ec9965c07f77f", "fullName": "testcase.test_project.test_api.TestDemo#test_004", "labels": [{"name": "feature", "value": "demo模块"}, {"name": "epic", "value": "demo接口"}, {"name": "story", "value": "yaml数据测试输出"}, {"name": "tag", "value": "test_api"}, {"name": "parentSuite", "value": "testcase.test_project"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestDemo"}, {"name": "host", "value": "DESKTOP-SQM4LQK"}, {"name": "thread", "value": "8728-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_project.test_api"}], "links": [{"type": "link", "url": "https://jsonplaceholder.typicode.com/posts", "name": "https://jsonplaceholder.typicode.com/posts"}]}